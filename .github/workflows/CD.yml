name: CD

on:
  pull_request:
    branches: [ dev ]

env:
  ECR_NAMESPACE: ${{ vars.ECR_NAMESPACE }}

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      actions: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Build with Gradle
        run: ./gradlew clean build -D spring.profiles.active=prod -x test

      # AWS ECR 에 이미지 업로드 권한을 얻기 위해 인증
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Grant execute permission for dockerTagAndPush
        run: chmod +x ./dockerTagAndPush.sh

      - name: docker build test
        run: docker compose build
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ELASTIC_PASSWORD: ${{secrets.ELASTIC_PASSWORD}}
          KIBANA_PASSWORD: ${{secrets.KIBANA_PASSWORD}}
          STACK_VERSION: ${{ vars.STACK_VERSION }}
          CLUSTER_NAME: ${{ vars.CLUSTER_NAME }}
          LICENSE: ${{ vars.LICENSE }}
          ES_PORT: ${{ vars.ES_PORT }}
          KIBANA_PORT: ${{ vars.KIBANA_PORT }}
          MEM_LIMIT: ${{ vars.MEM_LIMIT }}

      # docker compose 를 이용해서 여러 이미지를 모두 빌드하고, 별도의 script를 사용해서 이미지를 push 합니다.
#      - name: Build, Tag and Push docker image to AWS ECR
#        run: |
#          docker compose build
#          ./dockerTagAndPush.sh
#        env:
#          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
#          STACK_VERSION: ${{ vars.STACK_VERSION }}
#          CLUSTER_NAME: ${{ vars.CLUSTER_NAME }}
#          LICENSE: ${{ vars.LICENSE }}
#          ES_PORT: ${{ vars.ES_PORT }}
#          KIBANA_PORT: ${{ vars.KIBANA_PORT }}
#          MEM_LIMIT: ${{ vars.MEM_LIMIT }}

#  Deploy:
#    name: Deploy
#    needs: build
#    runs-on: ubuntu-latest
#
#    steps:
#      - uses: actions/checkout@v4
#
#      # docker compose로 container를 실행하기 위해 docker-compose.yml 을 EC2로 복사
#      - name: Copy Docker compose file to EC2
#        uses: appleboy/scp-action@v0.1.7
#        with:
#          host: ${{ secrets.EC2_HOST }}
#          username: ubuntu
#          key: ${{ secrets.EC2_KEY }}
#          source: "docker-compose.yml"
#          target: "/home/ubuntu"
#
#      # 사용 중인 포트를 점검하고 종료하는 script를 실행
#      - name: Upload stop-used-port script to EC2
#        uses: appleboy/scp-action@master
#        with:
#          host: ${{ secrets.EC2_HOST }}
#          username: ubuntu
#          key: ${{ secrets.EC2_KEY }}
#          source: "stop-used-port.sh"
#          target: "/home/ubuntu"
#
#      # ssh를 통해 EC2에 접속하고 docker container를 재시작
#      - name: Deploy to EC2
#        uses: appleboy/ssh-action@v1.0.3
#        env:
#          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          AWS_REGION: ${{ secrets.AWS_REGION }}
#          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
#          ELASTIC_PASSWORD: ${{secrets.ELASTIC_PASSWORD}}
#          KIBANA_PASSWORD: ${{secrets.KIBANA_PASSWORD}}
#        with:
#          host: ${{ secrets.EC2_HOST }}
#          username: ubuntu
#          key: ${{ secrets.EC2_KEY }}
#          port: 22
#          envs: |
#            AWS_ACCESS_KEY_ID,
#            AWS_SECRET_ACCESS_KEY,
#            AWS_REGION,
#            ECR_REGISTRY,
#            ECR_NAMESPACE,
#            ELASTIC_PASSWORD,
#            KIBANA_PASSWORD,
#            STACK_VERSION,
#            CLUSTER_NAME,
#            LICENSE,
#            ES_PORT,
#            KIBANA_PORT,
#            MEM_LIMIT
#          script: |
#            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}
#            docker ps --format "{{.ID}} {{.Image}}" | grep -vE "docker.elastic.co/elasticsearch/elasticsearch:8.6.0|wurstmeister/zookeeper:latest" | awk '{print $1}' | xargs -r docker stop
#            docker container prune -f
#            docker rmi $(docker images "${ECR_REGISTRY}/${ECR_NAMESPACE}/*" -q)
#            sudo swapoff -a
#            sudo swapon -a
#            sudo chmod +x /home/ubuntu/stop-used-port.sh
#            /home/ubuntu/stop-used-port.sh
#            docker compose pull
#            docker compose up -d --no-build
